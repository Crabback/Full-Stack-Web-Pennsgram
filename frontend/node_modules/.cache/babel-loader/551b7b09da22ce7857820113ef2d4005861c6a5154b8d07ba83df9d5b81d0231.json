{"ast":null,"code":"/* istanbul ignore file */\n\nimport axios from 'axios';\n\n//mockAPI URL \n// const rootURL = \"\";\n//JSON-server URL\nconst rootURL = 'http://localhost:8080';\n\n// Sends a Get request to the /Users endpoint\n// returns all the users in the DB\nexport const getUsers = async () => {\n  try {\n    const response = await axios.get(`${rootURL + '/Users'}`);\n    return response.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Takes the username of a user as input\n// and sends a Get request to the /user:id endpoint\n// returns the attributes of the user\nexport const getUser = async username => {\n  try {\n    const response = await axios.get(`localhost:8080/user/${username}`);\n    //get the fetched data's username\n    /*\n    let fetchedUsername;\n    response.data.forEach(element => {\n        fetchedUsername = element.username;\n    });        */\n    console.log(`successfully getUser by username: object with username: ${fetchedUsername}`);\n    return response;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getUserAvatar = async username => {\n  try {\n    // try to get a user with username\n    let user = await getUser(username);\n    user = user[0];\n    return user.avatar;\n  } catch (err) {\n    console.log(\"getUserAvatar() failed: username may not be valid \");\n    console.error(err);\n  }\n};\n\n// Takes the list of usernames as input\n// and sends a Get request to the /user:id endpoint\n// returns a list of user objects\nexport const getUsersAsList = async usernames => {\n  try {\n    const userObjects = [];\n    const roster = await getUsers();\n    roster.forEach(element => {\n      if (usernames.includes(element.username)) {\n        userObjects.push(element);\n      }\n    });\n    userObjects.forEach(o => {\n      console.log(o.username);\n    });\n    return userObjects;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Takes a user (without the id) as input\n// and sends a POST request to the /user endpoint\n// returns the attributes of the user with the id\nexport const createNewUser = async userObject => {\n  try {\n    const response = await axios.post(`${rootURL + '/Users'}`, userObject);\n    console.log(`username=${userObject.username}&password=${userObject.password}&followings=${userObject.followings}&followers=${userObject.followers}&avatar=${userObject.avatar}&posts=${userObject.posts}`);\n    return response.data;\n    // return the data with the id of the user\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const followUser = async (username1, username2) => {\n  try {\n    const response1 = await axios.get(`${rootURL + '/Users'}?username=${username1}`);\n    const response2 = await axios.get(`${rootURL + '/Users'}?username=${username2}`);\n    let user1 = response1.data[0];\n    let user2 = response2.data[0];\n    user1.followings.push(username2);\n    user2.followers.push(username1);\n    const responseReturn = await axios.put(`${rootURL + '/Users'}/${user1.id}`, user1);\n    await axios.put(`${rootURL + '/Users'}/${user2.id}`, user2);\n    //get the fetched data's username\n    console.log(`successfully ${username1} follows ${username2}`);\n    return responseReturn.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const unfollowUser = async (username1, username2) => {\n  try {\n    const response1 = await axios.get(`${rootURL + '/Users'}?username=${username1}`);\n    const response2 = await axios.get(`${rootURL + '/Users'}?username=${username2}`);\n    let user1 = response1.data[0];\n    let user2 = response2.data[0];\n    user1.followings = user1.followings.filter(n => n !== username2);\n    user2.followers = user2.followers.filter(n => n !== username1);\n    const responseReturn = await axios.put(`${rootURL + '/Users'}/${user1.id}`, user1);\n    await axios.put(`${rootURL + '/Users'}/${user2.id}`, user2);\n    console.log(`successfully ${username1} unfollows ${username2}`);\n    return responseReturn.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n///////////// Posts API //////////////\n\nexport const getPosts = async () => {\n  try {\n    const response = await axios.get(`${rootURL + '/Posts'}`);\n    return response.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getPost = async postId => {\n  try {\n    const response = await axios.get(`${rootURL + '/Posts'}?id=${postId}`);\n    console.log(`successfully getPost by id: object with id: ${postId}`);\n    console.log(\"post being fetched: author = \", response.data[0].author);\n    return response.data[0];\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n/**\n * get the latest post of a user specified by a username\n * @param {*} username \n * return: the latest post of this user with an added field: the user's avatar\n * being called by FeedPage\n */\nexport const getLastestPostOfAUser = async username => {\n  let user = null;\n  try {\n    // try to get a user with username\n    user = await getUser(username);\n    user = user[0];\n  } catch (err) {\n    console.log(\"getUser() failed: username may not be valid \");\n    console.error(err);\n  }\n  if (!user) return {};\n  const userPostIdList = user.posts;\n  const latestId = Math.max(...userPostIdList);\n  // get the post with the latest id of this user\n  let latestPost = {};\n  try {\n    // try to get a post with id\n    latestPost = await getPost(latestId);\n\n    //adding one more avatar field for this post\n    latestPost.avatar = user.avatar;\n  } catch (err) {\n    console.log(\"getPost() failed: wrong post id being passed in \");\n    console.error(err);\n  }\n  return latestPost;\n};\nexport const createNewPost = async (username, postObject) => {\n  try {\n    const response = await axios.get(`${rootURL + '/Users'}?username=${username}`);\n    let user = response.data[0];\n    user.posts.push(postObject.id);\n    const responsePut = await axios.put(`${rootURL + '/Users'}/${user.id}`, user);\n    const responsePost = await axios.post(`${rootURL + '/Posts'}`, postObject);\n    console.log(`successfully ${username} creates a new post`);\n    return responsePut.data[0];\n    // return the data with the id of the user\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const deletePost = async postId => {\n  try {\n    const response = await axios.delete(`${rootURL + '/Posts'}/${postId}`);\n    console.log(\"deletePost response: \", response);\n    return response.data;\n    // return the data with the id of the user\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const updatePost = async (postId, newImage, newDescription) => {\n  try {\n    let post = await getPost(postId);\n    post.image = newImage;\n    post.description = newDescription;\n    const responsePut = await axios.put(`${rootURL + '/Posts'}/${postId}`, post);\n    console.log(`successfully update post ${postId}`);\n    //return responsePut.data[0]; \n    // return the data with the id of the user\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const likePost = async (username, postId) => {\n  try {\n    let post = await getPost(postId);\n    post.likes.push(username);\n    const response = await axios.put(`${rootURL + '/Posts'}/${post.id}`, post);\n    console.log(`successfully ${username} likes post ${postId}`);\n    return response.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const unlikePost = async (username, postId) => {\n  try {\n    let post = await getPost(postId);\n    post.likes = post.likes.filter(n => n !== username);\n    const response = await axios.put(`${rootURL + '/Posts'}/${post.id}`, post);\n    console.log(`successfully ${username} likes post ${postId}`);\n    return response.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getComments = async postId => {\n  try {\n    let post = await getPost(postId);\n    console.log(`successfully comment post ${post.comments}`);\n    return post.comments;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addComment = async (postId, comment) => {\n  try {\n    let post = await getPost(postId);\n    post.comments.push(comment);\n    const response = await axios.put(`${rootURL + '/Posts'}/${postId}`, post);\n    console.log(`successfully comment ${comment} on post ${postId}`);\n    return response.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const deleteComment = async (postId, content) => {\n  try {\n    let post = await getPost(postId);\n    post.comments = post.comments.filter(n => n.comment !== content);\n    const response = await axios.put(`${rootURL + '/Posts'}/${postId}`, post);\n    console.log(`successfully delete comment [${content}] on post ${postId}`);\n    return response.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const updateComment = async (postId, oldcomment, newComment, newMention) => {\n  try {\n    let post = await getPost(postId);\n    post.comments.forEach(function (obj) {\n      if (obj.comment == oldcomment) {\n        obj.comment = newComment;\n        obj.mention = newMention;\n      }\n    });\n    const responsePut = await axios.put(`${rootURL + '/Posts'}/${postId}`, post);\n    console.log(`successfully update post ${postId}`);\n    //return responsePut.data[0]; \n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"names":["axios","rootURL","getUsers","response","get","data","err","console","error","getUser","username","log","fetchedUsername","getUserAvatar","user","avatar","getUsersAsList","usernames","userObjects","roster","forEach","element","includes","push","o","createNewUser","userObject","post","password","followings","followers","posts","followUser","username1","username2","response1","response2","user1","user2","responseReturn","put","id","unfollowUser","filter","n","getPosts","getPost","postId","author","getLastestPostOfAUser","userPostIdList","latestId","Math","max","latestPost","createNewPost","postObject","responsePut","responsePost","deletePost","delete","updatePost","newImage","newDescription","image","description","likePost","likes","unlikePost","getComments","comments","addComment","comment","deleteComment","content","updateComment","oldcomment","newComment","newMention","obj","mention"],"sources":["/Users/zanemaomac/Desktop/CIS5570/project/project---design-hw1-team_offersoverflow/bestapp666/frontend/src/api/mock_api.js"],"sourcesContent":["/* istanbul ignore file */\n\nimport axios from 'axios';\n\n//mockAPI URL \n// const rootURL = \"\";\n//JSON-server URL\nconst rootURL ='http://localhost:8080';\n\n// Sends a Get request to the /Users endpoint\n// returns all the users in the DB\nexport const getUsers = async () =>{\n    try{\n        const response = await axios.get(`${rootURL+'/Users'}`);\n        return response.data;\n    }\n    catch(err){\n        console.error(err);\n    }\n}\n\n// Takes the username of a user as input\n// and sends a Get request to the /user:id endpoint\n// returns the attributes of the user\nexport const getUser = async (username) =>{\n    try{    \n        const response = await axios.get(`localhost:8080/user/${username}`);\n        //get the fetched data's username\n        /*\n        let fetchedUsername;\n        response.data.forEach(element => {\n            fetchedUsername = element.username;\n        });        */\n        console.log(`successfully getUser by username: object with username: ${fetchedUsername}`);\n        return response;\n    }\n    catch(err){\n        console.error(err);\n    }\n}\n\nexport const getUserAvatar= async (username) =>{\n    try{\n        // try to get a user with username\n        let user = await getUser(username);\n        user = user[0];\n        return user.avatar;\n    }catch(err){\n        console.log(\"getUserAvatar() failed: username may not be valid \")\n        console.error(err);\n    }\n}\n\n// Takes the list of usernames as input\n// and sends a Get request to the /user:id endpoint\n// returns a list of user objects\nexport const getUsersAsList = async (usernames) =>{\n    try{    \n        const userObjects = [];\n        const roster = await getUsers(); \n        roster.forEach((element) => {\n            if(usernames.includes(element.username)){\n                userObjects.push(element);\n            }\n        })\n        userObjects.forEach((o)=>{console.log(o.username);})\n\n        return userObjects;\n    }\n    catch(err){\n        console.error(err);\n    }\n}\n\n// Takes a user (without the id) as input\n// and sends a POST request to the /user endpoint\n// returns the attributes of the user with the id\nexport const createNewUser = async (userObject) =>{\n    try{    \n        const response = await axios.post(`${rootURL+'/Users'}`, userObject);\n        console.log(`username=${userObject.username}&password=${userObject.password}&followings=${userObject.followings}&followers=${userObject.followers}&avatar=${userObject.avatar}&posts=${userObject.posts}`);\n        return response.data; \n        // return the data with the id of the user\n    }\n    catch(err){\n        console.error(err);\n    }\n}\n\nexport const followUser = async (username1, username2) =>{\n    try{    \n        const response1 = await axios.get(`${rootURL+'/Users'}?username=${username1}`);\n        const response2 = await axios.get(`${rootURL+'/Users'}?username=${username2}`);\n        let user1 = response1.data[0];\n        let user2 = response2.data[0];\n        user1.followings.push(username2);\n        user2.followers.push(username1);\n        const responseReturn = await axios.put(`${rootURL+'/Users'}/${user1.id}`, user1);\n        await axios.put(`${rootURL+'/Users'}/${user2.id}`, user2);\n        //get the fetched data's username\n        console.log(`successfully ${username1} follows ${username2}`);\n        return responseReturn.data;\n    }\n    catch(err){\n        console.error(err);\n    }\n}\n\nexport const unfollowUser = async (username1, username2) =>{\n    try{    \n        const response1 = await axios.get(`${rootURL+'/Users'}?username=${username1}`);\n        const response2 = await axios.get(`${rootURL+'/Users'}?username=${username2}`);\n        let user1 = response1.data[0]\n        let user2 = response2.data[0]\n        user1.followings = user1.followings.filter(n => n !== username2);\n        user2.followers = user2.followers.filter(n => n !== username1);\n        const responseReturn = await axios.put(`${rootURL+'/Users'}/${user1.id}`, user1);\n        await axios.put(`${rootURL+'/Users'}/${user2.id}`, user2);\n        console.log(`successfully ${username1} unfollows ${username2}`);\n        return responseReturn.data;\n    }\n    catch(err){\n        console.error(err);\n    }\n}\n\n\n///////////// Posts API //////////////\n\n\nexport const getPosts = async () =>{\n    try{\n        const response = await axios.get(`${rootURL+'/Posts'}`);\n        return response.data;\n    }\n    catch(err){\n        console.error(err);\n    }\n}\n\nexport const getPost = async (postId) =>{\n    try{    \n        const response = await axios.get(`${rootURL+'/Posts'}?id=${postId}`);\n        console.log(`successfully getPost by id: object with id: ${postId}`);\n        console.log(\"post being fetched: author = \", response.data[0].author);\n        return response.data[0];\n    }\n    catch(err){\n        console.error(err);\n    }\n}\n\n/**\n * get the latest post of a user specified by a username\n * @param {*} username \n * return: the latest post of this user with an added field: the user's avatar\n * being called by FeedPage\n */\nexport const getLastestPostOfAUser = async (username) => {\n    let user = null;\n    try{\n        // try to get a user with username\n        user = await getUser(username);\n        user = user[0];\n    }catch(err){\n        console.log(\"getUser() failed: username may not be valid \")\n        console.error(err);\n    }\n    if(!user) return {};\n    const userPostIdList = user.posts;\n    const latestId = Math.max(...userPostIdList);\n    // get the post with the latest id of this user\n    let latestPost = {};\n    try{\n        // try to get a post with id\n        latestPost = await getPost(latestId);\n\n        //adding one more avatar field for this post\n        latestPost.avatar = user.avatar;\n\n    }catch(err){\n        console.log(\"getPost() failed: wrong post id being passed in \")\n        console.error(err);\n    }\n    \n    return latestPost;\n}\n\n\n\nexport const createNewPost = async (username, postObject) =>{\n    try{    \n        const response = await axios.get(`${rootURL+'/Users'}?username=${username}`);\n        let user = response.data[0];\n        user.posts.push(postObject.id);\n        const responsePut = await axios.put(`${rootURL+'/Users'}/${user.id}`, user);\n        const responsePost = await axios.post(`${rootURL+'/Posts'}`, postObject);\n        console.log(`successfully ${username} creates a new post`);\n        return responsePut.data[0]; \n        // return the data with the id of the user\n    }\n    catch(err){\n        console.error(err);\n    }\n}\n\n\nexport const deletePost = async (postId) => {\n    try{    \n        const response = await axios.delete(`${rootURL+'/Posts'}/${postId}`);\n        console.log(\"deletePost response: \", response);\n        return response.data; \n        // return the data with the id of the user\n    }\n    catch(err){\n        console.error(err);\n    }\n}\n\nexport const updatePost = async (postId, newImage, newDescription) =>{\n    try{    \n        let post = await getPost(postId);\n        post.image = newImage;\n        post.description = newDescription;\n        const responsePut = await axios.put(`${rootURL+'/Posts'}/${postId}`, post);\n        console.log(`successfully update post ${postId}` );\n        //return responsePut.data[0]; \n        // return the data with the id of the user\n    }\n    catch(err){\n        console.error(err);\n    }\n}\n\nexport const likePost = async (username, postId) =>{\n    try{    \n        let post = await getPost(postId);\n        post.likes.push(username);\n        const response = await axios.put(`${rootURL+'/Posts'}/${post.id}`, post);\n        console.log(`successfully ${username} likes post ${postId}`);\n        return response.data;\n    }\n    catch(err){\n        console.error(err);\n    }\n}\n\nexport const unlikePost = async (username, postId) =>{\n    try{    \n        let post = await getPost(postId);\n        post.likes = post.likes.filter(n => n !== username);\n        const response = await axios.put(`${rootURL+'/Posts'}/${post.id}`, post);\n        console.log(`successfully ${username} likes post ${postId}`);\n        return response.data;\n    }\n    catch(err){\n        console.error(err);\n    }\n}\n\nexport const getComments = async (postId) =>{\n    try{    \n        let post = await getPost(postId);\n        console.log(`successfully comment post ${post.comments}`);\n        return post.comments;\n    }\n    catch(err){\n        console.error(err);\n    }\n}\n\nexport const addComment = async (postId, comment) =>{\n    try{    \n        let post = await getPost(postId);\n        post.comments.push(comment);\n        const response = await axios.put(`${rootURL+'/Posts'}/${postId}`, post);\n        console.log(`successfully comment ${comment} on post ${postId}`);\n        return response.data;\n    }\n    catch(err){\n        console.error(err);\n    }\n}\n\nexport const deleteComment = async (postId, content) =>{\n    try{    \n        let post = await getPost(postId);\n        post.comments = post.comments.filter(n => n.comment !== content);\n        const response = await axios.put(`${rootURL+'/Posts'}/${postId}`, post);\n        console.log(`successfully delete comment [${content}] on post ${postId}`);\n        return response.data;\n    }\n    catch(err){\n        console.error(err);\n    }\n}\n\nexport const updateComment = async (postId, oldcomment, newComment, newMention) =>{\n    try{    \n        let post = await getPost(postId);\n        post.comments.forEach(function(obj){\n            if(obj.comment == oldcomment){\n                obj.comment = newComment;\n                obj.mention = newMention;\n            }\n        })\n        const responsePut = await axios.put(`${rootURL+'/Posts'}/${postId}`, post);\n        console.log(`successfully update post ${postId}` );\n        //return responsePut.data[0]; \n    }\n    catch(err){\n        console.error(err);\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}