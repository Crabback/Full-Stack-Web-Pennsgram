{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const currentUserSlice = createSlice({\n  name: 'currentUser',\n  initialState: {\n    id: -1,\n    username: 'NOT_A_USER',\n    password: '',\n    followings: [],\n    followers: [],\n    avatar: \"https://img.wattpad.com/8f19b412f2223afe4288ed0904120a48b7a38ce1/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f776174747061642d6d656469612d736572766963652f53746f7279496d6167652f5650722d38464e2d744a515349673d3d2d3234323931353831302e313434336539633161633764383437652e6a7067\",\n    posts: [],\n    followerSuggestions: []\n  },\n  reducers: {\n    updateCurrentUser: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      return action.payload; //you must return payload to receive the \n    },\n\n    logoutAction: state => {\n      return state = {\n        id: -1,\n        username: 'NOT_A_USER',\n        password: '',\n        followings: [],\n        followers: [],\n        avatar: \"https://img.wattpad.com/8f19b412f2223afe4288ed0904120a48b7a38ce1/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f776174747061642d6d656469612d736572766963652f53746f7279496d6167652f5650722d38464e2d744a515349673d3d2d3234323931353831302e313434336539633161633764383437652e6a7067\",\n        posts: [],\n        followerSuggestions: []\n      };\n    }\n  }\n});\nexport const {\n  updateCurrentUser,\n  logoutAction\n} = currentUserSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectCurrentUser = state => state.currentUser;\nexport default currentUserSlice.reducer;","map":{"version":3,"names":["createSlice","currentUserSlice","name","initialState","id","username","password","followings","followers","avatar","posts","followerSuggestions","reducers","updateCurrentUser","state","action","payload","logoutAction","actions","selectCurrentUser","currentUser","reducer"],"sources":["/Users/zanemaomac/Desktop/CIS5570/project/project---design-hw1-team_offersoverflow/frontend/src/pages/UserPage/currentUserSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const currentUserSlice = createSlice({\n  name: 'currentUser',\n  initialState: {\n    id: -1,\n    username: 'NOT_A_USER',\n    password: '',\n    followings: [],\n    followers: [],\n    avatar:\"https://img.wattpad.com/8f19b412f2223afe4288ed0904120a48b7a38ce1/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f776174747061642d6d656469612d736572766963652f53746f7279496d6167652f5650722d38464e2d744a515349673d3d2d3234323931353831302e313434336539633161633764383437652e6a7067\",\n    posts: [],\n    followerSuggestions: []\n  },\n  reducers: {\n    updateCurrentUser: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      return action.payload //you must return payload to receive the \n    },\n    logoutAction: state => {\n      return state = {\n        id: -1,\n        username: 'NOT_A_USER',\n        password: '',\n        followings: [],\n        followers: [],\n        avatar:\"https://img.wattpad.com/8f19b412f2223afe4288ed0904120a48b7a38ce1/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f776174747061642d6d656469612d736572766963652f53746f7279496d6167652f5650722d38464e2d744a515349673d3d2d3234323931353831302e313434336539633161633764383437652e6a7067\",\n        posts: [],\n        followerSuggestions: []\n      }\n    },\n  }\n})\n\nexport const { updateCurrentUser, logoutAction } = currentUserSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectCurrentUser = (state) => state.currentUser\n\nexport default currentUserSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,OAAO,MAAMC,gBAAgB,GAAGD,WAAW,CAAC;EAC1CE,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE;IACZC,EAAE,EAAE,CAAC,CAAC;IACNC,QAAQ,EAAE,YAAY;IACtBC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,EAAE;IACdC,SAAS,EAAE,EAAE;IACbC,MAAM,EAAC,qRAAqR;IAC5RC,KAAK,EAAE,EAAE;IACTC,mBAAmB,EAAE;EACvB,CAAC;EACDC,QAAQ,EAAE;IACRC,iBAAiB,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACpC;MACA;MACA;MACA;MACA,OAAOA,MAAM,CAACC,OAAO,EAAC;IACxB,CAAC;;IACDC,YAAY,EAAEH,KAAK,IAAI;MACrB,OAAOA,KAAK,GAAG;QACbV,EAAE,EAAE,CAAC,CAAC;QACNC,QAAQ,EAAE,YAAY;QACtBC,QAAQ,EAAE,EAAE;QACZC,UAAU,EAAE,EAAE;QACdC,SAAS,EAAE,EAAE;QACbC,MAAM,EAAC,qRAAqR;QAC5RC,KAAK,EAAE,EAAE;QACTC,mBAAmB,EAAE;MACvB,CAAC;IACH;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEE,iBAAiB;EAAEI;AAAa,CAAC,GAAGhB,gBAAgB,CAACiB,OAAO;;AAE3E;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAIL,KAAK,IAAKA,KAAK,CAACM,WAAW;AAE7D,eAAenB,gBAAgB,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}