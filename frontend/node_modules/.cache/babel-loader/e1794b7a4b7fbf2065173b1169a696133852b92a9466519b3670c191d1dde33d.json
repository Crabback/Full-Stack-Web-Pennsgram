{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';export var currentUserSlice=createSlice({name:'currentUser',initialState:{id:-1,username:'NOT_A_USER',password:'',followings:[],followers:[],avatar:\"https://img.wattpad.com/8f19b412f2223afe4288ed0904120a48b7a38ce1/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f776174747061642d6d656469612d736572766963652f53746f7279496d6167652f5650722d38464e2d744a515349673d3d2d3234323931353831302e313434336539633161633764383437652e6a7067\",posts:[],followerSuggestions:[]},reducers:{updateCurrentUser:function updateCurrentUser(state,action){// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\nreturn action.payload;//you must return payload to receive the \n},logoutAction:function logoutAction(state){return state={id:-1,username:'NOT_A_USER',password:'',followings:[],followers:[],avatar:\"https://img.wattpad.com/8f19b412f2223afe4288ed0904120a48b7a38ce1/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f776174747061642d6d656469612d736572766963652f53746f7279496d6167652f5650722d38464e2d744a515349673d3d2d3234323931353831302e313434336539633161633764383437652e6a7067\",posts:[],followerSuggestions:[]};}}});var _currentUserSlice$act=currentUserSlice.actions,updateCurrentUser=_currentUserSlice$act.updateCurrentUser,logoutAction=_currentUserSlice$act.logoutAction;// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport{updateCurrentUser,logoutAction};export var selectCurrentUser=function selectCurrentUser(state){return state.currentUser;};export default currentUserSlice.reducer;","map":{"version":3,"names":["createSlice","currentUserSlice","name","initialState","id","username","password","followings","followers","avatar","posts","followerSuggestions","reducers","updateCurrentUser","state","action","payload","logoutAction","actions","selectCurrentUser","currentUser","reducer"],"sources":["/Users/zanemaomac/Desktop/CIS5570/project/project---design-hw1-team_offersoverflow/frontend/src/pages/UserPage/currentUserSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const currentUserSlice = createSlice({\n  name: 'currentUser',\n  initialState: {\n    id: -1,\n    username: 'NOT_A_USER',\n    password: '',\n    followings: [],\n    followers: [],\n    avatar:\"https://img.wattpad.com/8f19b412f2223afe4288ed0904120a48b7a38ce1/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f776174747061642d6d656469612d736572766963652f53746f7279496d6167652f5650722d38464e2d744a515349673d3d2d3234323931353831302e313434336539633161633764383437652e6a7067\",\n    posts: [],\n    followerSuggestions: []\n  },\n  reducers: {\n    updateCurrentUser: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      return action.payload //you must return payload to receive the \n    },\n    logoutAction: state => {\n      return state = {\n        id: -1,\n        username: 'NOT_A_USER',\n        password: '',\n        followings: [],\n        followers: [],\n        avatar:\"https://img.wattpad.com/8f19b412f2223afe4288ed0904120a48b7a38ce1/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f776174747061642d6d656469612d736572766963652f53746f7279496d6167652f5650722d38464e2d744a515349673d3d2d3234323931353831302e313434336539633161633764383437652e6a7067\",\n        posts: [],\n        followerSuggestions: []\n      }\n    },\n  }\n})\n\nexport const { updateCurrentUser, logoutAction } = currentUserSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectCurrentUser = (state) => state.currentUser\n\nexport default currentUserSlice.reducer"],"mappings":"AAAA,OAASA,WAAW,KAAQ,kBAAkB,CAE9C,MAAO,IAAMC,iBAAgB,CAAGD,WAAW,CAAC,CAC1CE,IAAI,CAAE,aAAa,CACnBC,YAAY,CAAE,CACZC,EAAE,CAAE,CAAC,CAAC,CACNC,QAAQ,CAAE,YAAY,CACtBC,QAAQ,CAAE,EAAE,CACZC,UAAU,CAAE,EAAE,CACdC,SAAS,CAAE,EAAE,CACbC,MAAM,CAAC,qRAAqR,CAC5RC,KAAK,CAAE,EAAE,CACTC,mBAAmB,CAAE,EACvB,CAAC,CACDC,QAAQ,CAAE,CACRC,iBAAiB,CAAE,2BAACC,KAAK,CAAEC,MAAM,CAAK,CACpC;AACA;AACA;AACA;AACA,MAAOA,OAAM,CAACC,OAAO,CAAC;AACxB,CAAC,CACDC,YAAY,CAAE,sBAAAH,KAAK,CAAI,CACrB,MAAOA,MAAK,CAAG,CACbV,EAAE,CAAE,CAAC,CAAC,CACNC,QAAQ,CAAE,YAAY,CACtBC,QAAQ,CAAE,EAAE,CACZC,UAAU,CAAE,EAAE,CACdC,SAAS,CAAE,EAAE,CACbC,MAAM,CAAC,qRAAqR,CAC5RC,KAAK,CAAE,EAAE,CACTC,mBAAmB,CAAE,EACvB,CAAC,CACH,CACF,CACF,CAAC,CAAC,CAEK,0BAA4CV,gBAAgB,CAACiB,OAAO,CAA5DL,iBAAiB,uBAAjBA,iBAAiB,CAAEI,YAAY,uBAAZA,YAAY,CAE9C;AACA;AACA;AAAA,uCACA,MAAO,IAAME,kBAAiB,CAAG,QAApBA,kBAAiB,CAAIL,KAAK,QAAKA,MAAK,CAACM,WAAW,GAE7D,cAAenB,iBAAgB,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}