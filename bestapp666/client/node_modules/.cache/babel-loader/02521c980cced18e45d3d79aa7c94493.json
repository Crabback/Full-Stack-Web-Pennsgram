{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport var currentUserSlice = createSlice({\n  name: 'currentUser',\n  initialState: {\n    id: -1,\n    username: 'NOT_A_USER',\n    password: '',\n    followings: [],\n    avatar: \"https://img.wattpad.com/8f19b412f2223afe4288ed0904120a48b7a38ce1/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f776174747061642d6d656469612d736572766963652f53746f7279496d6167652f5650722d38464e2d744a515349673d3d2d3234323931353831302e313434336539633161633764383437652e6a7067\",\n    posts: []\n  },\n  reducers: {\n    addLoginUser: function addLoginUser(state, action) {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      return action.payload; //you must return payload to receive the \n    },\n    logoutAction: function logoutAction(state) {\n      return state = {\n        id: -1,\n        username: 'NOT_A_USER',\n        password: '',\n        followings: [],\n        avatar: \"https://img.wattpad.com/8f19b412f2223afe4288ed0904120a48b7a38ce1/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f776174747061642d6d656469612d736572766963652f53746f7279496d6167652f5650722d38464e2d744a515349673d3d2d3234323931353831302e313434336539633161633764383437652e6a7067\",\n        posts: []\n      };\n    }\n  }\n});\nvar _otherUserSlice$actio = otherUserSlice.actions,\n    addLoginUser = _otherUserSlice$actio.addLoginUser,\n    logoutAction = _otherUserSlice$actio.logoutAction; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport { addLoginUser, logoutAction };\nexport var selectCurrentUser = function selectCurrentUser(state) {\n  return state.currentUser;\n};\nexport default currentUserSlice.reducer;","map":{"version":3,"names":["createSlice","currentUserSlice","name","initialState","id","username","password","followings","avatar","posts","reducers","addLoginUser","state","action","payload","logoutAction","otherUserSlice","actions","selectCurrentUser","currentUser","reducer"],"sources":["/Users/zanemaomac/Desktop/CIS5570/project/project---design-hw1-team_offersoverflow/bestapp666/client/src/pages/UserPage/currentUserSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const currentUserSlice = createSlice({\n  name: 'currentUser',\n  initialState: {\n    id: -1,\n    username: 'NOT_A_USER',\n    password: '',\n    followings: [],\n    avatar:\"https://img.wattpad.com/8f19b412f2223afe4288ed0904120a48b7a38ce1/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f776174747061642d6d656469612d736572766963652f53746f7279496d6167652f5650722d38464e2d744a515349673d3d2d3234323931353831302e313434336539633161633764383437652e6a7067\",\n    posts: []\n  },\n  reducers: {\n    addLoginUser: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      return action.payload //you must return payload to receive the \n    },\n    logoutAction: state => {\n      return state = {\n        id: -1,\n        username: 'NOT_A_USER',\n        password: '',\n        followings: [],\n        avatar:\"https://img.wattpad.com/8f19b412f2223afe4288ed0904120a48b7a38ce1/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f776174747061642d6d656469612d736572766963652f53746f7279496d6167652f5650722d38464e2d744a515349673d3d2d3234323931353831302e313434336539633161633764383437652e6a7067\",\n        posts: []\n      }\n    },\n  }\n})\n\nexport const { addLoginUser, logoutAction } = otherUserSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectCurrentUser = (state) => state.currentUser\n\nexport default currentUserSlice.reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,IAAMC,gBAAgB,GAAGD,WAAW,CAAC;EAC1CE,IAAI,EAAE,aADoC;EAE1CC,YAAY,EAAE;IACZC,EAAE,EAAE,CAAC,CADO;IAEZC,QAAQ,EAAE,YAFE;IAGZC,QAAQ,EAAE,EAHE;IAIZC,UAAU,EAAE,EAJA;IAKZC,MAAM,EAAC,qRALK;IAMZC,KAAK,EAAE;EANK,CAF4B;EAU1CC,QAAQ,EAAE;IACRC,YAAY,EAAE,sBAACC,KAAD,EAAQC,MAAR,EAAmB;MAC/B;MACA;MACA;MACA;MACA,OAAOA,MAAM,CAACC,OAAd,CAL+B,CAKT;IACvB,CAPO;IAQRC,YAAY,EAAE,sBAAAH,KAAK,EAAI;MACrB,OAAOA,KAAK,GAAG;QACbR,EAAE,EAAE,CAAC,CADQ;QAEbC,QAAQ,EAAE,YAFG;QAGbC,QAAQ,EAAE,EAHG;QAIbC,UAAU,EAAE,EAJC;QAKbC,MAAM,EAAC,qRALM;QAMbC,KAAK,EAAE;MANM,CAAf;IAQD;EAjBO;AAVgC,CAAD,CAApC;4BA+BuCO,cAAc,CAACC,O;IAA9CN,Y,yBAAAA,Y;IAAcI,Y,yBAAAA,Y,EAE7B;AACA;AACA;;;AACA,OAAO,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAACN,KAAD;EAAA,OAAWA,KAAK,CAACO,WAAjB;AAAA,CAA1B;AAEP,eAAelB,gBAAgB,CAACmB,OAAhC"},"metadata":{},"sourceType":"module"}