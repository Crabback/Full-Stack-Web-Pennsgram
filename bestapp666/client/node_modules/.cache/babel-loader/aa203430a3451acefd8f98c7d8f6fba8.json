{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _exporter = require('../csv/exporter');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar csvDefaultOptions = {\n  fileName: 'spreadsheet.csv',\n  separator: ',',\n  ignoreHeader: false,\n  ignoreFooter: true,\n  noAutoBOM: true,\n  blobType: 'text/plain;charset=utf-8',\n  exportAll: true,\n  onlyExportSelection: false\n};\n\nexports.default = function (Base) {\n  return function (_Base) {\n    _inherits(CSVOperation, _Base);\n\n    function CSVOperation() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, CSVOperation);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CSVOperation.__proto__ || Object.getPrototypeOf(CSVOperation)).call.apply(_ref, [this].concat(args))), _this), _this.handleExportCSV = function (source) {\n        var _this$props = _this.props,\n            columns = _this$props.columns,\n            exportCSV = _this$props.exportCSV,\n            keyField = _this$props.keyField;\n        var meta = (0, _exporter.getMetaInfo)(columns);\n        var options = exportCSV === true ? csvDefaultOptions : _extends({}, csvDefaultOptions, exportCSV); // get data for csv export\n\n        var data = void 0;\n\n        if (typeof source !== 'undefined') {\n          data = source;\n        } else if (options.exportAll) {\n          data = _this.props.data;\n        } else if (options.onlyExportFiltered) {\n          var payload = {};\n\n          _this.tableExposedAPIEmitter.emit('get.filtered.rows', payload);\n\n          data = payload.result;\n        } else {\n          var _payload = {};\n\n          _this.tableExposedAPIEmitter.emit('get.table.data', _payload);\n\n          data = _payload.result;\n        } // filter data by row selection\n\n\n        if (options.onlyExportSelection) {\n          var _payload2 = {};\n\n          _this.tableExposedAPIEmitter.emit('get.selected.rows', _payload2);\n\n          var selections = _payload2.result;\n          data = data.filter(function (row) {\n            return !!selections.find(function (sel) {\n              return row[keyField] === sel;\n            });\n          });\n        }\n\n        var content = (0, _exporter.transform)(data, meta, columns, _this._, options);\n        (0, _exporter.save)(content, options);\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    return CSVOperation;\n  }(Base);\n};","map":null,"metadata":{},"sourceType":"script"}