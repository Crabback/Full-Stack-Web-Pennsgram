{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport noUserProfile from \".../images/noUserProfile.jpeg\";\nexport var currentUserSlice = createSlice({\n  name: 'currentUser',\n  initialState: {\n    id: -1,\n    username: 'NOT_A_USER',\n    password: '',\n    followings: [],\n    avatar: noUserProfile,\n    posts: []\n  },\n  reducers: {\n    addLoginUser: function addLoginUser(state, action) {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      return action.payload; //you must return payload to receive the \n    },\n    logoutAction: function logoutAction(state) {\n      state = {\n        id: -1,\n        username: 'NOT_A_USER',\n        password: '',\n        followings: [],\n        avatar: noUserProfile,\n        posts: []\n      };\n    }\n  }\n});\nvar _currentUserSlice$act = currentUserSlice.actions,\n    addLoginUser = _currentUserSlice$act.addLoginUser,\n    logoutAction = _currentUserSlice$act.logoutAction; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport { addLoginUser, logoutAction };\nexport var selectCurrentUser = function selectCurrentUser(state) {\n  return state.currentUser;\n};\nexport default currentUserSlice.reducer;","map":{"version":3,"names":["createSlice","noUserProfile","currentUserSlice","name","initialState","id","username","password","followings","avatar","posts","reducers","addLoginUser","state","action","payload","logoutAction","actions","selectCurrentUser","currentUser","reducer"],"sources":["/Users/zanemaomac/Desktop/CIS5570/project/project---design-hw1-team_offersoverflow/bestapp666/client/src/pages/LoginPage/currentUserSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport noUserProfile from \".../images/noUserProfile.jpeg\";\n\nexport const currentUserSlice = createSlice({\n  name: 'currentUser',\n  initialState: {\n    id: -1,\n    username: 'NOT_A_USER',\n    password: '',\n    followings: [],\n    avatar: noUserProfile,\n    posts: []\n  },\n  reducers: {\n    addLoginUser: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n\n      return action.payload //you must return payload to receive the \n    },\n    logoutAction: state => {\n      state = {\n        id: -1,\n        username: 'NOT_A_USER',\n        password: '',\n        followings: [],\n        avatar: noUserProfile,\n        posts: []\n      }\n    },\n  }\n})\n\nexport const { addLoginUser, logoutAction } = currentUserSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectCurrentUser = (state) => state.currentUser\n\nexport default currentUserSlice.reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AAEA,OAAO,IAAMC,gBAAgB,GAAGF,WAAW,CAAC;EAC1CG,IAAI,EAAE,aADoC;EAE1CC,YAAY,EAAE;IACZC,EAAE,EAAE,CAAC,CADO;IAEZC,QAAQ,EAAE,YAFE;IAGZC,QAAQ,EAAE,EAHE;IAIZC,UAAU,EAAE,EAJA;IAKZC,MAAM,EAAER,aALI;IAMZS,KAAK,EAAE;EANK,CAF4B;EAU1CC,QAAQ,EAAE;IACRC,YAAY,EAAE,sBAACC,KAAD,EAAQC,MAAR,EAAmB;MAC/B;MACA;MACA;MACA;MAEA,OAAOA,MAAM,CAACC,OAAd,CAN+B,CAMT;IACvB,CARO;IASRC,YAAY,EAAE,sBAAAH,KAAK,EAAI;MACrBA,KAAK,GAAG;QACNR,EAAE,EAAE,CAAC,CADC;QAENC,QAAQ,EAAE,YAFJ;QAGNC,QAAQ,EAAE,EAHJ;QAINC,UAAU,EAAE,EAJN;QAKNC,MAAM,EAAER,aALF;QAMNS,KAAK,EAAE;MAND,CAAR;IAQD;EAlBO;AAVgC,CAAD,CAApC;4BAgCuCR,gBAAgB,CAACe,O;IAAhDL,Y,yBAAAA,Y;IAAcI,Y,yBAAAA,Y,EAE7B;AACA;AACA;;;AACA,OAAO,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,CAACL,KAAD;EAAA,OAAWA,KAAK,CAACM,WAAjB;AAAA,CAA1B;AAEP,eAAejB,gBAAgB,CAACkB,OAAhC"},"metadata":{},"sourceType":"module"}